{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyN+AeqthrrQVaee9bmNGqzg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NatChamnan/natchamnan/blob/main/DNS%20tunneling%20traffic%20detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from google.colab import files\n",
        "import joblib\n",
        "from collections import Counter\n",
        "from math import log\n",
        "\n",
        "# Step 1: Upload multiple CSV files\n",
        "print(\"Please upload your CSV files (e.g., dataset1.csv, dataset2.csv, etc.)\")\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Step 2: Load and combine all CSV files\n",
        "dataframes = []\n",
        "for filename in uploaded.keys():\n",
        "    if filename.endswith('.csv'):\n",
        "        print(f\"Loading {filename}...\")\n",
        "        try:\n",
        "            df = pd.read_csv(filename)\n",
        "            dataframes.append(df)\n",
        "        except Exception as e:\n",
        "            print(f\"Error loading {filename}: {e}\")\n",
        "    else:\n",
        "        print(f\"Skipping {filename} (not a CSV file)\")\n",
        "\n",
        "if not dataframes:\n",
        "    raise ValueError(\"No valid CSV files were uploaded.\")\n",
        "combined_df = pd.concat(dataframes, ignore_index=True)\n",
        "print(f\"Combined dataset shape: {combined_df.shape}\")\n",
        "\n",
        "# Step 3: Feature Engineering for DNS Tunneling Detection\n",
        "def calculate_entropy(s):\n",
        "    \"\"\"Calculate Shannon entropy of a string to detect encoded data.\"\"\"\n",
        "    if not s or pd.isna(s):\n",
        "        return 0\n",
        "    p, l = Counter(s), len(s)\n",
        "    return -sum(count/l * log(count/l, 2) for count in p.values())\n",
        "\n",
        "def extract_features(df):\n",
        "    \"\"\"Extract features from DNS packets for tunneling detection.\"\"\"\n",
        "    # Filter for DNS packets\n",
        "    dns_df = df[df['Protocol'] == 'DNS'].copy()\n",
        "    if dns_df.empty:\n",
        "        raise ValueError(\"No DNS packets found in the uploaded files.\")\n",
        "\n",
        "    # Extract domain name from Info column\n",
        "    dns_df['Domain'] = dns_df['Info'].str.extract(r'(?:CNAME|TXT|MX|A|AAAA) (.*?)(?: |$)', expand=False)\n",
        "\n",
        "    # Feature: Domain length\n",
        "    dns_df['Domain_Length'] = dns_df['Domain'].str.len().fillna(0)\n",
        "\n",
        "    # Feature: Domain entropy\n",
        "    dns_df['Domain_Entropy'] = dns_df['Domain'].apply(calculate_entropy)\n",
        "\n",
        "    # Feature: DNS record type (one-hot encoding)\n",
        "    dns_df['Record_Type'] = dns_df['Info'].str.extract(r'(CNAME|TXT|MX|A|AAAA)', expand=False).fillna('Other')\n",
        "    record_type_dummies = pd.get_dummies(dns_df['Record_Type'], prefix='Record')\n",
        "\n",
        "    # Feature: Query frequency by source\n",
        "    query_counts = dns_df.groupby('Source').size().to_dict()\n",
        "    dns_df['Query_Frequency'] = dns_df['Source'].map(query_counts)\n",
        "\n",
        "    # Feature: Packet length\n",
        "    dns_df['Packet_Length'] = dns_df['Length']\n",
        "\n",
        "    # Label: Assume dnscat domains are tunneling (malicious)\n",
        "    # Modify this if your dataset has a 'Label' column\n",
        "    dns_df['Label'] = dns_df['Domain'].str.contains('dnscat', case=False, na=False).astype(int)\n",
        "\n",
        "    # Combine features\n",
        "    features_df = pd.concat([\n",
        "        dns_df[['Domain_Length', 'Domain_Entropy', 'Query_Frequency', 'Packet_Length']],\n",
        "        record_type_dummies\n",
        "    ], axis=1)\n",
        "\n",
        "    return dns_df, features_df\n",
        "\n",
        "# Process the dataset\n",
        "try:\n",
        "    dns_df, features_df = extract_features(combined_df)\n",
        "except ValueError as e:\n",
        "    print(f\"Error: {e}\")\n",
        "    exit()\n",
        "\n",
        "# Step 4: Data Summary\n",
        "print(f\"Number of DNS packets: {len(dns_df)}\")\n",
        "print(f\"Number of tunneling packets (dnscat): {dns_df['Label'].sum()}\")\n",
        "print(f\"Feature set shape: {features_df.shape}\")\n",
        "\n",
        "# Step 5: Prepare data for classification\n",
        "X = features_df\n",
        "y = dns_df['Label']\n",
        "\n",
        "# Handle missing values\n",
        "X = X.fillna(0)\n",
        "\n",
        "# Scale features for Logistic Regression\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "X_train_scaled, X_test_scaled = train_test_split(X_scaled, test_size=0.3, random_state=42)\n",
        "\n",
        "# Step 6: Train and Evaluate Multiple Models\n",
        "models = {\n",
        "    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),\n",
        "    'XGBoost': XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42),\n",
        "    'Logistic Regression': LogisticRegression(max_iter=1000, random_state=42)\n",
        "}\n",
        "\n",
        "results = {}\n",
        "roc_data = {}\n",
        "\n",
        "for name, model in models.items():\n",
        "    print(f\"\\nTraining {name}...\")\n",
        "    # Use scaled data for Logistic Regression, unscaled for tree-based models\n",
        "    X_train_final = X_train_scaled if name == 'Logistic Regression' else X_train\n",
        "    X_test_final = X_test_scaled if name == 'Logistic Regression' else X_test\n",
        "\n",
        "    # Train the model\n",
        "    model.fit(X_train_final, y_train)\n",
        "\n",
        "    # Make predictions\n",
        "    y_pred = model.predict(X_test_final)\n",
        "    y_prob = model.predict_proba(X_test_final)[:, 1] if hasattr(model, 'predict_proba') else None\n",
        "\n",
        "    # Store results\n",
        "    results[name] = classification_report(y_test, y_pred, target_names=['Normal', 'Tunneling'], output_dict=True)\n",
        "\n",
        "    # Compute ROC curve\n",
        "    if y_prob is not None:\n",
        "        fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
        "        roc_auc = auc(fpr, tpr)\n",
        "        roc_data[name] = (fpr, tpr, roc_auc)\n",
        "\n",
        "    # Save model\n",
        "    joblib.dump(model, f'dns_tunneling_{name.lower().replace(\" \", \"_\")}_model.pkl')\n",
        "    print(f\"{name} model saved.\")\n",
        "\n",
        "# Step 7: Display Results\n",
        "for name, report in results.items():\n",
        "    print(f\"\\nClassification Report for {name}:\")\n",
        "    print(pd.DataFrame(report).transpose().round(3))\n",
        "\n",
        "# Step 8: Visualizations\n",
        "# Confusion Matrix for Random Forest (primary model)\n",
        "rf_model = models['Random Forest']\n",
        "y_pred_rf = rf_model.predict(X_test)\n",
        "cm = confusion_matrix(y_test, y_pred_rf)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal', 'Tunneling'], yticklabels=['Normal', 'Tunneling'])\n",
        "plt.title('Confusion Matrix (Random Forest)')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.savefig('confusion_matrix_rf.png')\n",
        "plt.show()\n",
        "\n",
        "# Feature Importance for Random Forest\n",
        "feature_importance = pd.DataFrame({\n",
        "    'Feature': X.columns,\n",
        "    'Importance': rf_model.feature_importances_\n",
        "})\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Importance', y='Feature', data=feature_importance.sort_values(by='Importance', ascending=False))\n",
        "plt.title('Feature Importance (Random Forest)')\n",
        "plt.savefig('feature_importance_rf.png')\n",
        "plt.show()\n",
        "\n",
        "# ROC Curves for all models\n",
        "plt.figure(figsize=(10, 8))\n",
        "for name, (fpr, tpr, roc_auc) in roc_data.items():\n",
        "    plt.plot(fpr, tpr, label=f'{name} (AUC = {roc_auc:.2f})')\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curves for DNS Tunneling Detection')\n",
        "plt.legend(loc='lower right')\n",
        "plt.savefig('roc_curves.png')\n",
        "plt.show()\n",
        "\n",
        "# Step 9: Sample Tunneling Packets\n",
        "print(\"\\nSample DNS Tunneling Packets (dnscat detected):\")\n",
        "tunneling_samples = dns_df[dns_df['Label'] == 1][['Time', 'Source', 'Destination', 'Info']].head(5)\n",
        "print(tunneling_samples)\n",
        "tunneling_samples.to_csv('tunneling_samples.csv', index=False)\n",
        "print(\"Sample tunneling packets saved as 'tunneling_samples.csv'\")\n",
        "\n",
        "# Step 10: Save Scaler for Logistic Regression\n",
        "joblib.dump(scaler, 'scaler.pkl')\n",
        "print(\"Scaler saved as 'scaler.pkl'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Gf8J6qrqk2i1",
        "outputId": "29425d84-cb60-4574-d1ff-a7be3302726f"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please upload your CSV files (e.g., dataset1.csv, dataset2.csv, etc.)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-3901d7a6-66cc-412a-8831-f791a3722e55\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-3901d7a6-66cc-412a-8831-f791a3722e55\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dataset1.csv to dataset1 (7).csv\n",
            "Saving dataset2.csv to dataset2 (5).csv\n",
            "Saving dataset3.csv to dataset3 (5).csv\n",
            "Loading dataset1 (7).csv...\n",
            "Loading dataset2 (5).csv...\n",
            "Loading dataset3 (5).csv...\n",
            "Combined dataset shape: (258796, 7)\n",
            "Number of DNS packets: 4864\n",
            "Number of tunneling packets (dnscat): 1570\n",
            "Feature set shape: (4864, 8)\n",
            "\n",
            "Training Random Forest...\n",
            "Random Forest model saved.\n",
            "\n",
            "Training XGBoost...\n",
            "XGBoost model saved.\n",
            "\n",
            "Training Logistic Regression...\n",
            "Logistic Regression model saved.\n",
            "\n",
            "Classification Report for Random Forest:\n",
            "              precision  recall  f1-score  support\n",
            "Normal              1.0     1.0       1.0   1010.0\n",
            "Tunneling           1.0     1.0       1.0    450.0\n",
            "accuracy            1.0     1.0       1.0      1.0\n",
            "macro avg           1.0     1.0       1.0   1460.0\n",
            "weighted avg        1.0     1.0       1.0   1460.0\n",
            "\n",
            "Classification Report for XGBoost:\n",
            "              precision  recall  f1-score  support\n",
            "Normal              1.0     1.0       1.0   1010.0\n",
            "Tunneling           1.0     1.0       1.0    450.0\n",
            "accuracy            1.0     1.0       1.0      1.0\n",
            "macro avg           1.0     1.0       1.0   1460.0\n",
            "weighted avg        1.0     1.0       1.0   1460.0\n",
            "\n",
            "Classification Report for Logistic Regression:\n",
            "              precision  recall  f1-score  support\n",
            "Normal              1.0     1.0       1.0   1010.0\n",
            "Tunneling           1.0     1.0       1.0    450.0\n",
            "accuracy            1.0     1.0       1.0      1.0\n",
            "macro avg           1.0     1.0       1.0   1460.0\n",
            "weighted avg        1.0     1.0       1.0   1460.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [09:24:24] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Sample DNS Tunneling Packets (dnscat detected):\n",
            "        Time         Source    Destination  \\\n",
            "0   0.000000  192.168.1.104  192.168.1.106   \n",
            "1   0.001719  192.168.1.106  192.168.1.104   \n",
            "11  1.005131  192.168.1.104  192.168.1.106   \n",
            "12  1.006870  192.168.1.106  192.168.1.104   \n",
            "13  2.011095  192.168.1.104  192.168.1.106   \n",
            "\n",
            "                                                 Info  \n",
            "0   Standard query 0x0ac9 CNAME dnscat.e859014a4ae...  \n",
            "1   Standard query response 0x0ac9 CNAME dnscat.e8...  \n",
            "11  Standard query 0x08ac CNAME dnscat.21fd014a4ab...  \n",
            "12  Standard query response 0x08ac CNAME dnscat.21...  \n",
            "13  Standard query 0xed22 TXT dnscat.61eb014a4ad08...  \n",
            "Sample tunneling packets saved as 'tunneling_samples.csv'\n",
            "Scaler saved as 'scaler.pkl'\n"
          ]
        }
      ]
    }
  ]
}